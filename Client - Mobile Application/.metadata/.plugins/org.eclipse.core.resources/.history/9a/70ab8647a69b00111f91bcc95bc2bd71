package virtua.pad;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Point;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.PowerManager;
import android.text.Html.TagHandler;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

enum appState{startMenu,tutorial,game,wait};

public class VirtuaPadMain extends Activity implements SensorEventListener
{
	//handles network code
    private VirtuaPadClient vpClient;
    
    private clientState connectionState = clientState.disconnected;
    private appState guiState = appState.startMenu;
    
    //members related to start layout;
    private StartScreen startScreen;
    private TutorialScreen tutorialScreen;
    private GameScreen gameScreen;
    private WaitScreen waitScreen;
    
    private SensorManager sensorManager;
    private Sensor accelerometer;
    private float[] accData;
    private boolean shooting = false;
    private PowerManager.WakeLock wakeLock;
    // For detecting shakes
    private float accelLast;
    private float accelCurrent;
    private float accel;
	
    private int appWidth;
    private int appHeight;
    
    public static final String PREFS_NAME = "spaceBugzPrefsFile";
    private boolean hasReadTutorial = false;
    public boolean getHasReadTutorial()
    {
    	return hasReadTutorial;
    }
    
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
    	super.onCreate(savedInstanceState);
    	
    	this.requestWindowFeature(Window.FEATURE_NO_TITLE);
    	    	
	}
    
    public void onResume()
    {
    	Log.v("app", "resume");
    	super.onResume();

    	SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
    	hasReadTutorial = settings.getBoolean("hasReadTutorial", false);
    	
    	vpClient = new VirtuaPadClient(this);
    	vpClient.Connect();
    	// Go full screen
	    final Window window = getWindow();
	    window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
	    
    	PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
    	wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "My Tag");
    	wakeLock.acquire();
    	
	    Display display = getWindowManager().getDefaultDisplay(); 
	    appHeight = display.getHeight();
	    appWidth = display.getWidth();
    	
	    sensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
	    accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
	    accData = new float[3];
	    accel = 0.00f;
	    accelCurrent = SensorManager.GRAVITY_EARTH;
	    accelLast = SensorManager.GRAVITY_EARTH;
	    
	    startScreen = new StartScreen(this, vpClient, this);
	    
	    setContentView(startScreen);
	    
	    this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
	}
    
    public void SetAppState(clientState state)
    {
    	connectionState = state;
    	
    	if(connectionState == clientState.hasID && guiState == appState.startMenu)
    	{
    		startScreen.ShowStartButtons();
    	}
    	else if(connectionState == clientState.joinedGame && guiState == appState.wait)
    	{
    		waitScreen.DelayAndGotoGameScreen();
    		//SetGamePlayLayout();
    	}
    /*	else if(connectionState == clientState.joinedGame && guiState == appState.tutorial)
    	{
    		SetGamePlayLayout();
    	}*/    	
    	else if(connectionState == clientState.couldNotConnect && guiState == appState.startMenu)
    	{
    		startScreen.ShowCouldNotConnect();
    	}
    }
    
    public void SetTutorialLayout()
    {
    	tutorialScreen = new TutorialScreen(this, vpClient,this);
    	guiState = appState.tutorial;
    	setContentView(tutorialScreen);
    }
    
    public void SetWaitLayout()
    {
    	guiState = appState.wait;
    	waitScreen = new WaitScreen(this, vpClient, this);
    	setContentView(waitScreen);
    }
    
    public void setGameLayout()
    {
    	
    	gameScreen = new GameScreen(this, vpClient, appHeight, appWidth);
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST );
    	guiState = appState.game;
    	setContentView(gameScreen);
    }
    
    protected void onStop ()
    {
    	Log.v("app", "stop");    	
        super.onStop();
        //super.finish();
    }
    
    protected void onDestroy()
    {
    	Log.v("app", "destroy");
    	super.onDestroy();
    }
    
    protected void onPause() 
    {
    	super.onPause();
    	
    	Log.v("app", "pause");
    	
    	//if( connectionState == clientState.hasID || connectionState == clientState.joinedGame)
    	//{
    	vpClient.Stop(); //stops threads that handles networking
        //}
    	if(guiState == appState.game)
    	{
    		sensorManager.unregisterListener(this);
    	}
    	
    	
    	
    	wakeLock.release();
    }
    
	public void onAccuracyChanged(Sensor sensor, int accuracy) 
	{
		 
	}
		
	public boolean getShooting()
	{
		return shooting;
	}
	
	public void setShooting(boolean newShooting)
	{
		shooting = newShooting;
	}
	
	public void onSensorChanged(SensorEvent event) 
	{
		for(int i = 0 ; i < accData.length ; i++)
		{
			accData[i] = -event.values[i];
		}
		vpClient.setAccData(accData);
    	
    	// Detect shaking
    	accelLast = accelCurrent;
    	accelCurrent = (float) Math.sqrt((double) (accData[0]*accData[0] + 
    			accData[1]*accData[1] + accData[2]*accData[2]));
    	float delta = accelCurrent - accelLast;
    	accel = accel * 0.9f + delta;
    	
    	vpClient.setIsJumping( (accel > 3) );
    		
    	//tw.setText((mAccel > 2) + "");
		
	}
}